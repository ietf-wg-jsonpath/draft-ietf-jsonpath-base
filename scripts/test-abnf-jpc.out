OK: array_slice
OK: array_slice_on_exact_match
OK: array_slice_on_non_overlapping_array
OK: array_slice_on_object
OK: array_slice_on_partially_overlapping_array
OK: array_slice_with_large_number_for_end
OK: array_slice_with_large_number_for_end_and_negative_step
OK: array_slice_with_large_number_for_start
OK: array_slice_with_large_number_for_start_end_negative_step
OK: array_slice_with_negative_start_and_end_and_range_of_-1
OK: array_slice_with_negative_start_and_end_and_range_of_0
OK: array_slice_with_negative_start_and_end_and_range_of_1
OK: array_slice_with_negative_start_and_positive_end_and_range_of_-1
OK: array_slice_with_negative_start_and_positive_end_and_range_of_0
OK: array_slice_with_negative_start_and_positive_end_and_range_of_1
OK: array_slice_with_negative_step
OK: array_slice_with_negative_step_and_start_greater_than_end
OK: array_slice_with_negative_step_on_partially_overlapping_array
OK: array_slice_with_negative_step_only
OK: array_slice_with_open_end
OK: array_slice_with_open_end_and_negative_step
OK: array_slice_with_open_start
OK: array_slice_with_open_start_and_end
OK: array_slice_with_open_start_and_end_and_step_empty
OK: array_slice_with_open_start_and_end_on_object
OK: array_slice_with_open_start_and_negative_step
OK: array_slice_with_positive_start_and_negative_end_and_range_of_-1
OK: array_slice_with_positive_start_and_negative_end_and_range_of_0
OK: array_slice_with_positive_start_and_negative_end_and_range_of_1
OK: array_slice_with_range_of_-1
OK: array_slice_with_range_of_0
OK: array_slice_with_range_of_1
OK: array_slice_with_start_-1_and_open_end
OK: array_slice_with_start_-2_and_open_end
OK: array_slice_with_start_large_negative_number_and_open_end_on_short_array
OK: array_slice_with_step
OK: array_slice_with_step_0
OK: array_slice_with_step_1
OK -- failing correctly: array_slice_with_step_and_leading_zeros $[010:024:010] Expected one of " ", "\t", "\n", "\r", ":", ",", "]" at line 1, column 4 (byte 4) after [0
Expected one of " ", "\t", "\n", "\r", ":", ",", "]" at line 1, column 4 (byte 4):
$[010:024:010]
~~~^
OK: array_slice_with_step_but_end_not_aligned
OK: array_slice_with_step_empty
OK: array_slice_with_step_only
OK: bracket_notation
OK: bracket_notation_after_recursive_descent
OK: bracket_notation_on_object_without_key
OK: bracket_notation_with_NFC_path_on_NFD_key
OK: bracket_notation_with_dot
OK: bracket_notation_with_double_quotes
OK -- failing correctly: bracket_notation_with_empty_path $[] Expected one of " ", "\t", "\n", "\r", "\"", "'", "*", "0", "-", [1-9], ":", "?" at line 1, column 3 (byte 3) after [
Expected one of " ", "\t", "\n", "\r", "\"", "'", "*", "0", "-", [1-9], ":", "?" at line 1, column 3 (byte 3):
$[]
~~^
OK: bracket_notation_with_empty_string
OK: bracket_notation_with_empty_string_doubled_quoted
OK: bracket_notation_with_negative_number_on_short_array
OK: bracket_notation_with_number
OK: bracket_notation_with_number_-1
OK: bracket_notation_with_number_-1_on_empty_array
OK: bracket_notation_with_number_0
OK: bracket_notation_with_number_after_dot_notation_with_wildcard_on_nested_arrays_with_different_length
OK: bracket_notation_with_number_on_object
OK: bracket_notation_with_number_on_short_array
OK: bracket_notation_with_number_on_string
OK: bracket_notation_with_quoted_array_slice_literal
OK: bracket_notation_with_quoted_closing_bracket_literal
OK: bracket_notation_with_quoted_current_object_literal
OK: bracket_notation_with_quoted_dot_literal
OK: bracket_notation_with_quoted_dot_wildcard
OK: bracket_notation_with_quoted_double_quote_literal
OK: bracket_notation_with_quoted_escaped_backslash
OK: bracket_notation_with_quoted_escaped_single_quote
OK: bracket_notation_with_quoted_number_on_object
OK: bracket_notation_with_quoted_root_literal
OK: bracket_notation_with_quoted_special_characters_combined
OK -- failing correctly: bracket_notation_with_quoted_string_and_unescaped_single_quote $['single'quote'] Expected one of " ", "\t", "\n", "\r", ",", "]" at line 1, column 11 (byte 11) after ['single'
Expected one of " ", "\t", "\n", "\r", ",", "]" at line 1, column 11 (byte 11):
$['single'quote']
~~~~~~~~~~^
OK: bracket_notation_with_quoted_union_literal
OK: bracket_notation_with_quoted_wildcard_literal
OK: bracket_notation_with_quoted_wildcard_literal_on_object_without_key
OK: bracket_notation_with_spaces
OK: bracket_notation_with_string_including_dot_wildcard
OK -- failing correctly: bracket_notation_with_two_literals_separated_by_dot $['two'.'some'] Expected one of " ", "\t", "\n", "\r", ",", "]" at line 1, column 8 (byte 8) after ['two'
Expected one of " ", "\t", "\n", "\r", ",", "]" at line 1, column 8 (byte 8):
$['two'.'some']
~~~~~~~^
OK -- failing correctly: bracket_notation_with_two_literals_separated_by_dot_without_quotes $[two.some] Expected one of " ", "\t", "\n", "\r", "\"", "'", "*", "0", "-", [1-9], ":", "?" at line 1, column 3 (byte 3) after [
Expected one of " ", "\t", "\n", "\r", "\"", "'", "*", "0", "-", [1-9], ":", "?" at line 1, column 3 (byte 3):
$[two.some]
~~^
OK: bracket_notation_with_wildcard_after_array_slice
OK: bracket_notation_with_wildcard_after_dot_notation_after_bracket_notation_with_wildcard
OK: bracket_notation_with_wildcard_after_recursive_descent
OK: bracket_notation_with_wildcard_on_array
OK: bracket_notation_with_wildcard_on_empty_array
OK: bracket_notation_with_wildcard_on_empty_object
OK: bracket_notation_with_wildcard_on_null_value_array
OK: bracket_notation_with_wildcard_on_object
OK -- failing correctly: bracket_notation_without_quotes $[key] Expected one of " ", "\t", "\n", "\r", "\"", "'", "*", "0", "-", [1-9], ":", "?" at line 1, column 3 (byte 3) after [
Expected one of " ", "\t", "\n", "\r", "\"", "'", "*", "0", "-", [1-9], ":", "?" at line 1, column 3 (byte 3):
$[key]
~~^
OK -- failing correctly: current_with_dot_notation @.a Expected "$" at line 1, column 1 (byte 1)
@.a
^
OK -- failing correctly: dot_bracket_notation $.['key'] Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3) after .
Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3):
$.['key']
~~^
OK -- failing correctly: dot_bracket_notation_with_double_quotes $.["key"] Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3) after .
Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3):
$.["key"]
~~^
OK -- failing correctly: dot_bracket_notation_without_quotes $.[key] Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3) after .
Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3):
$.[key]
~~^
OK: dot_notation
OK: dot_notation_after_array_slice
OK: dot_notation_after_bracket_notation_after_recursive_descent
OK: dot_notation_after_bracket_notation_with_wildcard
OK: dot_notation_after_bracket_notation_with_wildcard_on_one_matching
OK: dot_notation_after_bracket_notation_with_wildcard_on_some_matching
OK: dot_notation_after_filter_expression
OK: dot_notation_after_recursive_descent
OK: dot_notation_after_recursive_descent_after_dot_notation
OK -- failing correctly: dot_notation_after_recursive_descent_with_extra_dot $...key Expected one of "[", "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 4 (byte 4) after ..
Expected one of "[", "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 4 (byte 4):
$...key
~~~^
OK: dot_notation_after_union
OK: dot_notation_after_union_with_keys
OK: dot_notation_on_array
OK: dot_notation_on_array_value
OK: dot_notation_on_array_with_containing_object_matching_key
OK: dot_notation_on_empty_object_value
OK: dot_notation_on_null_value
OK: dot_notation_on_object_without_key
OK -- failing correctly: dot_notation_with_dash $.key-dash Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", ".." at line 1, column 6 (byte 6) after 
Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", ".." at line 1, column 6 (byte 6):
$.key-dash
~~~~~^
OK -- failing correctly: dot_notation_with_double_quotes $."key" Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3) after .
Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3):
$."key"
~~^
OK -- failing correctly: dot_notation_with_double_quotes_after_recursive_descent $.."key" Expected one of "[", "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 4 (byte 4) after ..
Expected one of "[", "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 4 (byte 4):
$.."key"
~~~^
OK -- failing correctly: dot_notation_with_empty_path $. Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3) after .
Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3):
$.
~~^
OK: dot_notation_with_key_named_in
OK: dot_notation_with_key_named_length
OK: dot_notation_with_key_named_length_on_array
OK: dot_notation_with_key_named_null
OK: dot_notation_with_key_named_true
OK -- failing correctly: dot_notation_with_key_root_literal $.$ Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3) after .
Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3):
$.$
~~^
OK: dot_notation_with_non_ASCII_key
OK -- failing correctly: dot_notation_with_number $.2 Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3) after .
Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3):
$.2
~~^
OK -- failing correctly: dot_notation_with_number_-1 $.-1 Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3) after .
Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3):
$.-1
~~^
OK -- failing correctly: dot_notation_with_number_on_object $.2 Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3) after .
Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3):
$.2
~~^
OK -- failing correctly: dot_notation_with_single_quotes $.'key' Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3) after .
Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3):
$.'key'
~~^
OK -- failing correctly: dot_notation_with_single_quotes_after_recursive_descent $..'key' Expected one of "[", "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 4 (byte 4) after ..
Expected one of "[", "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 4 (byte 4):
$..'key'
~~~^
OK -- failing correctly: dot_notation_with_single_quotes_and_dot $.'some.key' Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3) after .
Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3):
$.'some.key'
~~^
OK -- failing correctly: dot_notation_with_space_padded_key $. a  Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3) after .
Expected one of "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 3 (byte 3):
$. a 
~~^
OK: dot_notation_with_wildcard_after_dot_notation_after_dot_notation_with_wildcard
OK: dot_notation_with_wildcard_after_dot_notation_with_wildcard_on_nested_arrays
OK: dot_notation_with_wildcard_after_recursive_descent
OK: dot_notation_with_wildcard_after_recursive_descent_on_null_value_array
OK: dot_notation_with_wildcard_after_recursive_descent_on_scalar
OK: dot_notation_with_wildcard_on_array
OK: dot_notation_with_wildcard_on_empty_array
OK: dot_notation_with_wildcard_on_empty_object
OK: dot_notation_with_wildcard_on_object
OK -- failing correctly: dot_notation_without_dot $a Expected one of " ", "\t", "\n", "\r", "[", ".", ".." at line 1, column 2 (byte 2) after 
Expected one of " ", "\t", "\n", "\r", "[", ".", ".." at line 1, column 2 (byte 2):
$a
~^
OK -- failing correctly: dot_notation_without_root .key Expected "$" at line 1, column 1 (byte 1)
.key
^
OK -- failing correctly: dot_notation_without_root_and_dot key Expected "$" at line 1, column 1 (byte 1)
key
^
OK -- failing correctly: empty  Expected "$" at line 1, column 1 (byte 1)
OK: filter_expression_after_dot_notation_with_wildcard_after_recursive_descent
OK: filter_expression_after_recursive_descent
OK: filter_expression_on_object
OK -- failing correctly: filter_expression_with_addition $[?(@.key+50==100)] Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", "==", "!=", "<=", ">=", "<", ">", "..", "&&", "||", ")" at line 1, column 10 (byte 10) after [?(@.key
Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", "==", "!=", "<=", ">=", "<", ">", "..", "&&", "||", ")" at line 1, column 10 (byte 10):
$[?(@.key+50==100)]
~~~~~~~~~^
OK: filter_expression_with_boolean_and_operator
OK -- failing correctly: filter_expression_with_boolean_and_operator_and_value_false $[?(@.key>0 && false)] Expected one of " ", "\t", "\n", "\r", "==", "!=", "<=", ">=", "<", ">", [a-z], "_", [0-9], "(" at line 1, column 21 (byte 21) after [?(@.key>0 && false
Expected one of " ", "\t", "\n", "\r", "==", "!=", "<=", ">=", "<", ">", [a-z], "_", [0-9], "(" at line 1, column 21 (byte 21):
$[?(@.key>0 && false)]
~~~~~~~~~~~~~~~~~~~~^
OK -- failing correctly: filter_expression_with_boolean_and_operator_and_value_true $[?(@.key>0 && true)] Expected one of " ", "\t", "\n", "\r", "==", "!=", "<=", ">=", "<", ">", [a-z], "_", [0-9], "(" at line 1, column 20 (byte 20) after [?(@.key>0 && true
Expected one of " ", "\t", "\n", "\r", "==", "!=", "<=", ">=", "<", ">", [a-z], "_", [0-9], "(" at line 1, column 20 (byte 20):
$[?(@.key>0 && true)]
~~~~~~~~~~~~~~~~~~~^
OK: filter_expression_with_boolean_or_operator
OK -- failing correctly: filter_expression_with_boolean_or_operator_and_value_false $[?(@.key>0 || false)] Expected one of " ", "\t", "\n", "\r", "==", "!=", "<=", ">=", "<", ">", [a-z], "_", [0-9], "(" at line 1, column 21 (byte 21) after [?(@.key>0 || false
Expected one of " ", "\t", "\n", "\r", "==", "!=", "<=", ">=", "<", ">", [a-z], "_", [0-9], "(" at line 1, column 21 (byte 21):
$[?(@.key>0 || false)]
~~~~~~~~~~~~~~~~~~~~^
OK -- failing correctly: filter_expression_with_boolean_or_operator_and_value_true $[?(@.key>0 || true)] Expected one of " ", "\t", "\n", "\r", "==", "!=", "<=", ">=", "<", ">", [a-z], "_", [0-9], "(" at line 1, column 20 (byte 20) after [?(@.key>0 || true
Expected one of " ", "\t", "\n", "\r", "==", "!=", "<=", ">=", "<", ">", [a-z], "_", [0-9], "(" at line 1, column 20 (byte 20):
$[?(@.key>0 || true)]
~~~~~~~~~~~~~~~~~~~^
OK: filter_expression_with_bracket_notation
OK: filter_expression_with_bracket_notation_and_current_object_literal
OK: filter_expression_with_bracket_notation_with_-1
OK: filter_expression_with_bracket_notation_with_number
OK: filter_expression_with_bracket_notation_with_number_on_object
OK: filter_expression_with_current_object
OK: filter_expression_with_different_grouped_operators
OK: filter_expression_with_different_ungrouped_operators
OK -- failing correctly: filter_expression_with_division $[?(@.key/10==5)] Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", "==", "!=", "<=", ">=", "<", ">", "..", "&&", "||", ")" at line 1, column 10 (byte 10) after [?(@.key
Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", "==", "!=", "<=", ">=", "<", ">", "..", "&&", "||", ")" at line 1, column 10 (byte 10):
$[?(@.key/10==5)]
~~~~~~~~~^
OK -- failing correctly: filter_expression_with_dot_notation_with_dash $[?(@.key-dash == 'value')] Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", "==", "!=", "<=", ">=", "<", ">", "..", "&&", "||", ")" at line 1, column 10 (byte 10) after [?(@.key
Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", "==", "!=", "<=", ">=", "<", ">", "..", "&&", "||", ")" at line 1, column 10 (byte 10):
$[?(@.key-dash == 'value')]
~~~~~~~~~^
OK -- failing correctly: filter_expression_with_dot_notation_with_number $[?(@.2 == 'second')] Expected one of [A-Z], [a-z], "_", [-􏿿], "*" at line 1, column 7 (byte 7) after [?(@.
Expected one of [A-Z], [a-z], "_", [-􏿿], "*" at line 1, column 7 (byte 7):
$[?(@.2 == 'second')]
~~~~~~^
OK -- failing correctly: filter_expression_with_dot_notation_with_number_on_array $[?(@.2 == 'third')] Expected one of [A-Z], [a-z], "_", [-􏿿], "*" at line 1, column 7 (byte 7) after [?(@.
Expected one of [A-Z], [a-z], "_", [-􏿿], "*" at line 1, column 7 (byte 7):
$[?(@.2 == 'third')]
~~~~~~^
OK -- failing correctly: filter_expression_with_empty_expression $[?()] Expected one of " ", "\t", "\n", "\r", "!", "(", "0", "-", [1-9], "-0", "\"", "'", "true", "false", "null", "@", "$", [a-z] at line 1, column 5 (byte 5) after [?(
Expected one of " ", "\t", "\n", "\r", "!", "(", "0", "-", [1-9], "-0", "\"", "'", "true", "false", "null", "@", "$", [a-z] at line 1, column 5 (byte 5):
$[?()]
~~~~^
OK: filter_expression_with_equals
OK -- failing correctly: filter_expression_with_equals_array $[?(@.d==["v1","v2"])] Expected one of " ", "\t", "\n", "\r", "0", "-", [1-9], "-0", "\"", "'", "true", "false", "null", "@", "$", [a-z] at line 1, column 10 (byte 10) after [?(@.d==
Expected one of " ", "\t", "\n", "\r", "0", "-", [1-9], "-0", "\"", "'", "true", "false", "null", "@", "$", [a-z] at line 1, column 10 (byte 10):
$[?(@.d==["v1","v2"])]
~~~~~~~~~^
OK -- failing correctly: filter_expression_with_equals_array_for_array_slice_with_range_1 $[?(@[0:1]==[1])] Expected one of " ", "\t", "\n", "\r", "[", ".", "..", "&&", "||", ")" at line 1, column 11 (byte 11) after [?(@[0:1]
Expected one of " ", "\t", "\n", "\r", "[", ".", "..", "&&", "||", ")" at line 1, column 11 (byte 11):
$[?(@[0:1]==[1])]
~~~~~~~~~~^
OK -- failing correctly: filter_expression_with_equals_array_for_dot_notation_with_star $[?(@.*==[1,2])] Expected one of " ", "\t", "\n", "\r", "[", ".", "..", "&&", "||", ")" at line 1, column 8 (byte 8) after [?(@.*
Expected one of " ", "\t", "\n", "\r", "[", ".", "..", "&&", "||", ")" at line 1, column 8 (byte 8):
$[?(@.*==[1,2])]
~~~~~~~^
OK -- failing correctly: filter_expression_with_equals_array_or_equals_true $[?(@.d==["v1","v2"] || (@.d == true))] Expected one of " ", "\t", "\n", "\r", "0", "-", [1-9], "-0", "\"", "'", "true", "false", "null", "@", "$", [a-z] at line 1, column 10 (byte 10) after [?(@.d==
Expected one of " ", "\t", "\n", "\r", "0", "-", [1-9], "-0", "\"", "'", "true", "false", "null", "@", "$", [a-z] at line 1, column 10 (byte 10):
$[?(@.d==["v1","v2"] || (@.d == true))]
~~~~~~~~~^
OK -- failing correctly: filter_expression_with_equals_array_with_single_quotes $[?(@.d==['v1','v2'])] Expected one of " ", "\t", "\n", "\r", "0", "-", [1-9], "-0", "\"", "'", "true", "false", "null", "@", "$", [a-z] at line 1, column 10 (byte 10) after [?(@.d==
Expected one of " ", "\t", "\n", "\r", "0", "-", [1-9], "-0", "\"", "'", "true", "false", "null", "@", "$", [a-z] at line 1, column 10 (byte 10):
$[?(@.d==['v1','v2'])]
~~~~~~~~~^
OK -- failing correctly: filter_expression_with_equals_boolean_expression_value $[?((@.key<44)==false)] Expected one of " ", "\t", "\n", "\r", "&&", "||", ")" at line 1, column 15 (byte 15) after [?((@.key<44)
Expected one of " ", "\t", "\n", "\r", "&&", "||", ")" at line 1, column 15 (byte 15):
$[?((@.key<44)==false)]
~~~~~~~~~~~~~~^
OK: filter_expression_with_equals_false
OK: filter_expression_with_equals_null
OK -- failing correctly: filter_expression_with_equals_number_for_array_slice_with_range_1 $[?(@[0:1]==1)] Expected one of " ", "\t", "\n", "\r", "[", ".", "..", "&&", "||", ")" at line 1, column 11 (byte 11) after [?(@[0:1]
Expected one of " ", "\t", "\n", "\r", "[", ".", "..", "&&", "||", ")" at line 1, column 11 (byte 11):
$[?(@[0:1]==1)]
~~~~~~~~~~^
OK -- failing correctly: filter_expression_with_equals_number_for_bracket_notation_with_star $[?(@[*]==2)] Expected one of " ", "\t", "\n", "\r", "[", ".", "..", "&&", "||", ")" at line 1, column 9 (byte 9) after [?(@[*]
Expected one of " ", "\t", "\n", "\r", "[", ".", "..", "&&", "||", ")" at line 1, column 9 (byte 9):
$[?(@[*]==2)]
~~~~~~~~^
OK -- failing correctly: filter_expression_with_equals_number_for_dot_notation_with_star $[?(@.*==2)] Expected one of " ", "\t", "\n", "\r", "[", ".", "..", "&&", "||", ")" at line 1, column 8 (byte 8) after [?(@.*
Expected one of " ", "\t", "\n", "\r", "[", ".", "..", "&&", "||", ")" at line 1, column 8 (byte 8):
$[?(@.*==2)]
~~~~~~~^
OK: filter_expression_with_equals_number_with_fraction
OK -- failing correctly: filter_expression_with_equals_number_with_leading_zeros $[?(@.key==010)] Expected one of ".", "e", " ", "\t", "\n", "\r", "&&", "||", ")" at line 1, column 13 (byte 13) after [?(@.key==0
Expected one of ".", "e", " ", "\t", "\n", "\r", "&&", "||", ")" at line 1, column 13 (byte 13):
$[?(@.key==010)]
~~~~~~~~~~~~^
OK -- failing correctly: filter_expression_with_equals_object $[?(@.d=={"k":"v"})] Expected one of " ", "\t", "\n", "\r", "0", "-", [1-9], "-0", "\"", "'", "true", "false", "null", "@", "$", [a-z] at line 1, column 10 (byte 10) after [?(@.d==
Expected one of " ", "\t", "\n", "\r", "0", "-", [1-9], "-0", "\"", "'", "true", "false", "null", "@", "$", [a-z] at line 1, column 10 (byte 10):
$[?(@.d=={"k":"v"})]
~~~~~~~~~^
OK: filter_expression_with_equals_on_array_of_numbers
OK: filter_expression_with_equals_on_array_without_match
OK: filter_expression_with_equals_on_object
OK: filter_expression_with_equals_on_object_with_key_matching_query
OK: filter_expression_with_equals_string
OK: filter_expression_with_equals_string_in_NFC
OK: filter_expression_with_equals_string_with_current_object_literal
OK: filter_expression_with_equals_string_with_dot_literal
OK: filter_expression_with_equals_string_with_single_quotes
OK: filter_expression_with_equals_string_with_unicode_character_escape
OK: filter_expression_with_equals_true
OK: filter_expression_with_equals_with_path_and_path
OK: filter_expression_with_equals_with_root_reference
OK: filter_expression_with_greater_than
OK: filter_expression_with_greater_than_or_equal
OK: filter_expression_with_greater_than_string
OK -- failing correctly: filter_expression_with_in_array_of_values $[?(@.d in [2, 3])] Expected one of " ", "\t", "\n", "\r", "[", ".", "==", "!=", "<=", ">=", "<", ">", "..", "&&", "||", ")" at line 1, column 9 (byte 9) after [?(@.d 
Expected one of " ", "\t", "\n", "\r", "[", ".", "==", "!=", "<=", ">=", "<", ">", "..", "&&", "||", ")" at line 1, column 9 (byte 9):
$[?(@.d in [2, 3])]
~~~~~~~~^
OK -- failing correctly: filter_expression_with_in_current_object $[?(2 in @.d)] Expected one of " ", "\t", "\n", "\r", "==", "!=", "<=", ">=", "<", ">" at line 1, column 7 (byte 7) after [?(2 
Expected one of " ", "\t", "\n", "\r", "==", "!=", "<=", ">=", "<", ">" at line 1, column 7 (byte 7):
$[?(2 in @.d)]
~~~~~~^
OK: filter_expression_with_length_free_function
OK -- failing correctly: filter_expression_with_length_function $[?(@.length() == 4)] Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", "==", "!=", "<=", ">=", "<", ">", "..", "&&", "||", ")" at line 1, column 13 (byte 13) after [?(@.length
Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", "==", "!=", "<=", ">=", "<", ">", "..", "&&", "||", ")" at line 1, column 13 (byte 13):
$[?(@.length() == 4)]
~~~~~~~~~~~~^
OK: filter_expression_with_length_property
OK: filter_expression_with_less_than
OK: filter_expression_with_less_than_or_equal
OK -- failing correctly: filter_expression_with_local_dot_key_and_null_in_data $[?(@.key='value')] Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", "==", "!=", "<=", ">=", "<", ">", "..", "&&", "||", ")" at line 1, column 10 (byte 10) after [?(@.key
Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", "==", "!=", "<=", ">=", "<", ">", "..", "&&", "||", ")" at line 1, column 10 (byte 10):
$[?(@.key='value')]
~~~~~~~~~^
OK -- failing correctly: filter_expression_with_multiplication $[?(@.key*2==100)] Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", "==", "!=", "<=", ">=", "<", ">", "..", "&&", "||", ")" at line 1, column 10 (byte 10) after [?(@.key
Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", "==", "!=", "<=", ">=", "<", ">", "..", "&&", "||", ")" at line 1, column 10 (byte 10):
$[?(@.key*2==100)]
~~~~~~~~~^
OK: filter_expression_with_negation_and_equals
OK -- failing correctly: filter_expression_with_negation_and_equals_array_or_equals_true $[?(!(@.d==["v1","v2"]) || (@.d == true))] Expected one of " ", "\t", "\n", "\r", "0", "-", [1-9], "-0", "\"", "'", "true", "false", "null", "@", "$", [a-z] at line 1, column 12 (byte 12) after [?(!(@.d==
Expected one of " ", "\t", "\n", "\r", "0", "-", [1-9], "-0", "\"", "'", "true", "false", "null", "@", "$", [a-z] at line 1, column 12 (byte 12):
$[?(!(@.d==["v1","v2"]) || (@.d == true))]
~~~~~~~~~~~^
OK: filter_expression_with_negation_and_less_than
OK: filter_expression_with_negation_and_without_value
OK: filter_expression_with_non_singular_existence_test
OK: filter_expression_with_not_equals
OK -- failing correctly: filter_expression_with_not_equals_array_or_equals_true $[?((@.d!=["v1","v2"]) || (@.d == true))] Expected one of " ", "\t", "\n", "\r", "0", "-", [1-9], "-0", "\"", "'", "true", "false", "null", "@", "$", [a-z] at line 1, column 11 (byte 11) after [?((@.d!=
Expected one of " ", "\t", "\n", "\r", "0", "-", [1-9], "-0", "\"", "'", "true", "false", "null", "@", "$", [a-z] at line 1, column 11 (byte 11):
$[?((@.d!=["v1","v2"]) || (@.d == true))]
~~~~~~~~~~^
OK -- failing correctly: filter_expression_with_parent_axis_operator $[*].bookmarks[?(@.page == 45)]^^^ Expected one of " ", "\t", "\n", "\r", "[", ".", ".." at line 1, column 32 (byte 32) after 
Expected one of " ", "\t", "\n", "\r", "[", ".", ".." at line 1, column 32 (byte 32):
$[*].bookmarks[?(@.page == 45)]^^^
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
OK -- failing correctly: filter_expression_with_regular_expression $[?(@.name=~/hello.*/)] Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", "==", "!=", "<=", ">=", "<", ">", "..", "&&", "||", ")" at line 1, column 11 (byte 11) after [?(@.name
Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", "==", "!=", "<=", ">=", "<", ">", "..", "&&", "||", ")" at line 1, column 11 (byte 11):
$[?(@.name=~/hello.*/)]
~~~~~~~~~~^
OK -- failing correctly: filter_expression_with_regular_expression_from_member $[?(@.name=~/@.pattern/)] Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", "==", "!=", "<=", ">=", "<", ">", "..", "&&", "||", ")" at line 1, column 11 (byte 11) after [?(@.name
Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", "==", "!=", "<=", ">=", "<", ">", "..", "&&", "||", ")" at line 1, column 11 (byte 11):
$[?(@.name=~/@.pattern/)]
~~~~~~~~~~^
OK -- failing correctly: filter_expression_with_set_wise_comparison_to_scalar $[?(@[*]>=4)] Expected one of " ", "\t", "\n", "\r", "[", ".", "..", "&&", "||", ")" at line 1, column 9 (byte 9) after [?(@[*]
Expected one of " ", "\t", "\n", "\r", "[", ".", "..", "&&", "||", ")" at line 1, column 9 (byte 9):
$[?(@[*]>=4)]
~~~~~~~~^
OK -- failing correctly: filter_expression_with_set_wise_comparison_to_set $.x[?(@[*]>=$.y[*])] Expected one of " ", "\t", "\n", "\r", "[", ".", "..", "&&", "||", ")" at line 1, column 11 (byte 11) after [?(@[*]
Expected one of " ", "\t", "\n", "\r", "[", ".", "..", "&&", "||", ")" at line 1, column 11 (byte 11):
$.x[?(@[*]>=$.y[*])]
~~~~~~~~~~^
OK -- failing correctly: filter_expression_with_single_equal $[?(@.key=42)] Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", "==", "!=", "<=", ">=", "<", ">", "..", "&&", "||", ")" at line 1, column 10 (byte 10) after [?(@.key
Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", "==", "!=", "<=", ">=", "<", ">", "..", "&&", "||", ")" at line 1, column 10 (byte 10):
$[?(@.key=42)]
~~~~~~~~~^
OK: filter_expression_with_subfilter
OK: filter_expression_with_subpaths
OK -- failing correctly: filter_expression_with_subtraction $[?(@.key-50==-100)] Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", "==", "!=", "<=", ">=", "<", ">", "..", "&&", "||", ")" at line 1, column 10 (byte 10) after [?(@.key
Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", "==", "!=", "<=", ">=", "<", ">", "..", "&&", "||", ")" at line 1, column 10 (byte 10):
$[?(@.key-50==-100)]
~~~~~~~~~^
OK: filter_expression_with_tautological_comparison
OK -- failing correctly: filter_expression_with_triple_equal $[?(@.key===42)] Expected one of " ", "\t", "\n", "\r", "0", "-", [1-9], "-0", "\"", "'", "true", "false", "null", "@", "$", [a-z] at line 1, column 12 (byte 12) after [?(@.key==
Expected one of " ", "\t", "\n", "\r", "0", "-", [1-9], "-0", "\"", "'", "true", "false", "null", "@", "$", [a-z] at line 1, column 12 (byte 12):
$[?(@.key===42)]
~~~~~~~~~~~^
OK: filter_expression_with_value
OK: filter_expression_with_value_after_dot_notation_with_wildcard_on_array_of_objects
OK: filter_expression_with_value_after_recursive_descent
OK -- failing correctly: filter_expression_with_value_false $[?(false)] Expected one of " ", "\t", "\n", "\r", "==", "!=", "<=", ">=", "<", ">", [a-z], "_", [0-9], "(" at line 1, column 10 (byte 10) after [?(false
Expected one of " ", "\t", "\n", "\r", "==", "!=", "<=", ">=", "<", ">", [a-z], "_", [0-9], "(" at line 1, column 10 (byte 10):
$[?(false)]
~~~~~~~~~^
OK: filter_expression_with_value_from_recursive_descent
OK -- failing correctly: filter_expression_with_value_null $[?(null)] Expected one of " ", "\t", "\n", "\r", "==", "!=", "<=", ">=", "<", ">", [a-z], "_", [0-9], "(" at line 1, column 9 (byte 9) after [?(null
Expected one of " ", "\t", "\n", "\r", "==", "!=", "<=", ">=", "<", ">", [a-z], "_", [0-9], "(" at line 1, column 9 (byte 9):
$[?(null)]
~~~~~~~~^
OK -- failing correctly: filter_expression_with_value_true $[?(true)] Expected one of " ", "\t", "\n", "\r", "==", "!=", "<=", ">=", "<", ">", [a-z], "_", [0-9], "(" at line 1, column 9 (byte 9) after [?(true
Expected one of " ", "\t", "\n", "\r", "==", "!=", "<=", ">=", "<", ">", [a-z], "_", [0-9], "(" at line 1, column 9 (byte 9):
$[?(true)]
~~~~~~~~^
OK: filter_expression_without_parens
OK: filter_expression_without_value
OK -- failing correctly: function_sum $.data.sum() Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", ".." at line 1, column 11 (byte 11) after 
Expected one of [0-9], [A-Z], [a-z], "_", [-􏿿], " ", "\t", "\n", "\r", "[", ".", ".." at line 1, column 11 (byte 11):
$.data.sum()
~~~~~~~~~~^
OK -- failing correctly: parens_notation $(key,more) Expected one of " ", "\t", "\n", "\r", "[", ".", ".." at line 1, column 2 (byte 2) after 
Expected one of " ", "\t", "\n", "\r", "[", ".", ".." at line 1, column 2 (byte 2):
$(key,more)
~^
OK -- failing correctly: recursive_descent $.. Expected one of "[", "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 4 (byte 4) after ..
Expected one of "[", "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 4 (byte 4):
$..
~~~^
OK -- failing correctly: recursive_descent_after_dot_notation $.key.. Expected one of "[", "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 8 (byte 8) after ..
Expected one of "[", "*", [A-Z], [a-z], "_", [-􏿿] at line 1, column 8 (byte 8):
$.key..
~~~~~~~^
OK: recursive_descent_on_nested_arrays
OK: root
OK: root_on_scalar
OK: root_on_scalar_false
OK: root_on_scalar_true
OK -- failing correctly: script_expression $[(@.length-1)] Expected one of " ", "\t", "\n", "\r", "\"", "'", "*", "0", "-", [1-9], ":", "?" at line 1, column 3 (byte 3) after [
Expected one of " ", "\t", "\n", "\r", "\"", "'", "*", "0", "-", [1-9], ":", "?" at line 1, column 3 (byte 3):
$[(@.length-1)]
~~^
OK: union
OK: union_with_duplication_from_array
OK: union_with_duplication_from_object
OK: union_with_filter
OK: union_with_keys
OK: union_with_keys_after_array_slice
OK: union_with_keys_after_bracket_notation
OK: union_with_keys_after_dot_notation_with_wildcard
OK: union_with_keys_after_recursive_descent
OK: union_with_keys_on_object_without_key
OK: union_with_numbers_in_decreasing_order
OK: union_with_repeated_matches_after_dot_notation_with_wildcard
OK: union_with_slice_and_number
OK: union_with_spaces
OK: union_with_wildcard_and_number
---- successfully completed
